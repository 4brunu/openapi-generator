//
// EnumArrays.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc public class EnumArrays: NSObject, Codable {

    public enum JustSymbol: Int, Codable, CaseIterable {
        case greaterThanOrEqualTo
        case dollar

        func value() -> String {
            switch self {
                case .greaterThanOrEqualTo: return ">="
                case .dollar: return "$"
            }
        }

        static func fromValue(value: String) -> JustSymbol? {
            if  value == ">=" { return .greaterThanOrEqualTo } else if  value == "$" { return .dollar }
            return nil
        }
    }
    public enum ArrayEnum: Int, Codable, CaseIterable {
        case fish
        case crab

        func value() -> String {
            switch self {
                case .fish: return "fish"
                case .crab: return "crab"
            }
        }

        static func fromValue(value: String) -> ArrayEnum? {
            if  value == "fish" { return .fish } else if  value == "crab" { return .crab }
            return nil
        }
    }
    public var justSymbol: JustSymbol?
    public var arrayEnum: [ArrayEnum]?

    public init(justSymbol: JustSymbol?, arrayEnum: [ArrayEnum]?) {
        self.justSymbol = justSymbol
        self.arrayEnum = arrayEnum
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case justSymbol
        case arrayEnum
    }

}
